__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/Users/chensongzhu/mobile-flashcard/components/DeckList.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _colors = _require(_dependencyMap[3], "../utils/colors");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        DeckList: {
            displayName: "DeckList"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/chensongzhu/mobile-flashcard/components/DeckList.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var DeckList = _wrapComponent("DeckList")(function (_Component) {
        _inherits(DeckList, _Component);

        function DeckList() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, DeckList);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DeckList.__proto__ || Object.getPrototypeOf(DeckList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                deckList: [{
                    name: 'test1',
                    cardsNumbers: 11
                }, {
                    name: 'test2',
                    cardsNumbers: 3
                }]
            }, _this.renderDeck = function (_ref2) {
                var name = _ref2.name,
                    cardsNumbers = _ref2.cardsNumbers;
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.item,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 12
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.deckName,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 13
                            }
                        },
                        name
                    ),
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.deckCardNumber,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 16
                            }
                        },
                        "cards number: ",
                        cardsNumbers
                    )
                );
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(DeckList, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var deckList = this.state.deckList;
                var ds = new _reactNative.ListView.DataSource({
                    rowHasChanged: function rowHasChanged(r1, r2) {
                        return r1 !== r2;
                    }
                });
                return _react3.default.createElement(_reactNative.ListView, {
                    dataSource: ds.cloneWithRows(deckList),
                    renderRow: function renderRow(rowData) {
                        return _this2.renderDeck(rowData);
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 25
                    }
                });
            }
        }]);

        return DeckList;
    }(_react2.Component));

    var styles = _reactNative.StyleSheet.create({
        item: {
            backgroundColor: _colors.white,
            borderRadius: _reactNative.Platform.OS === 'ios' ? 16 : 2,
            padding: 20,
            marginLeft: 10,
            marginRight: 10,
            marginTop: 17,
            justifyContent: 'center',
            shadowRadius: 3,
            shadowOpacity: 0.8,
            shadowColor: 'rgba(0, 0, 0, 0.24)',
            shadowOffset: {
                width: 0,
                height: 3
            },
            alignItems: 'center'
        },
        deckName: {
            fontSize: 25,
            paddingTop: 20,
            paddingBottom: 20
        },
        deckCardNumber: {
            fontSize: 15
        }
    });

    exports.default = DeckList;
});